name: Docker Build, Test and Deploy

on:
  push:
    branches: [main, test-branch]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [main, test-branch]

env:
  IMAGE_NAME: json_validator
  DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/json_validator

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest requests
    
    - name: Run server in background
      run: |
        python server.py &
        echo $! > server.pid
        sleep 3  # Даем серверу время на запуск
    
    - name: Run tests
      run: |
        python -m pytest -v test_server.py
    
    - name: Stop server
      if: always()
      run: |
        kill $(cat server.pid) || true

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Необходимо для push в Docker Hub

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Debug info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          ls -la
    
      # Настройка Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Логин в Docker Hub (ТОЛЬКО для main ветки и trusted contributors)
      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main' || github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Сборка образа (без push для PR)
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.DOCKERHUB_REPO }}:latest
            ${{ env.DOCKERHUB_REPO }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository_url }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Inspect image metadata
        if: always()
        run: |
          docker inspect ${{ env.DOCKERHUB_REPO }}:${{ env.VERSION }} | \
          jq '.[].Config.Labels'
    
  test-image:
    needs: test
    runs-on: ubuntu-latest
    steps:
      # Тестирование образа
      - name: Test Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .
          docker run -d -p 8000:8000 --name ${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}
          sleep 5
          curl -sSf http://localhost:8000/
          curl -sSf http://localhost:8000/static/style.css
          curl -sSf http://localhost:8000/static/script.js

      # Очистка
      - name: Cleanup
        if: always()
        run: |
          docker stop ${{ env.IMAGE_NAME }} || true
          docker rm ${{ env.IMAGE_NAME }} || true